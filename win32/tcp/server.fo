( Example server code,
                  just accept some data and echo it back with the
		  sign changed

                      Copyright 1994, Everett F. Carter Jr.
                      Permission is granted by the author to use
		      this software for any application provided this
		      copyright notice is preserved.



	example usage:    3145 server

)

\        @(#)server.fo	1.3 12:18:54 11/17/94   EFC

VARIABLE sock
VARIABLE local
VARIABLE from  16 ALLOT           \ MAKE SURE THIS IS BIG ENOUGH FOR YOUR SYSTEM !!
                                  \ (see documentation on SOCKET-ACCEPT)

VARIABLE data

VARIABLE verbose         0 verbose !     \ turn this on if you want server
                                         \ write to standard output

: server ( port -- )

       0 0 ROT 1 sopen

       DUP sock !
       
       0< ABORT" unable to open socket as server "

      
       5 sock @  listen

       0< ABORT" listen failed "

       verbose @ IF
       			." sock = "  sock @ . CR
		 THEN

       ( now we wait for the client to connect )
       from 16 sock @ socket-accept

       DUP local !

       0< ABORT" accept failed "


       verbose @ IF  
       			." local = "  local @ . CR
		 THEN


      sock @ close DROP   ( not going to listen for more connections )



      ( send a welcome message to the client )
      s" Welcome to Internetworking with Forth !"
      DUP data !
      data 1 CELLS local @ write DROP    ( first write the string length )
      local @ write                      ( now write the string )

      verbose @ IF
      			." (wrote " . ." bytes of message) " CR
                ELSE
                        DROP
		THEN


      ( read the number of points the remote is going to send )
      data 1 CELLS local @ read

      verbose @ IF
      			." (read " . ." bytes)   value: "  data ? CR
                ELSE
                        DROP
		THEN


      ( read the data from the remote, change it sign and send it back )
      data @ 0 DO

      			data 1 CELLS local @ read
			verbose @ IF
      				." (read " . ." bytes)   value: "  data ? CR
                                  ELSE
                                     DROP
			          THEN

      			data @ -1 * data !

      			data 1 CELLS local @ write

			verbose @ IF
      				    ." (wrote " . ." bytes) " CR
                                  ELSE
                                    DROP
			          THEN
		LOOP



	local @ close  DROP


	( This demonstration code, just services one request
          and then exits )

;

